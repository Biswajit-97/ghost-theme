<!doctype html>
<html lang='en'>
<head>
  <meta charset='utf-8'>
  <meta http-equiv='X-UA-Compatible' content='IE=edge'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <title>{{ meta_title }}</title>
 

  <script>

/* ------------- color mode ------------------ */

    var user_color_scheme = localStorage.getItem('user-color-scheme');

    function initial_mode_set(mode) {
      if (mode) {
        document.documentElement.setAttribute('data-user-color-scheme', mode);
      }
    }

    initial_mode_set(user_color_scheme);

    window.addEventListener('DOMContentLoaded', (event) => {
      var STORAGE_KEY = 'user-color-scheme';
      var COLOR_MODE_KEY = '--color-mode';
      var modeToggleButton = document.querySelector('.js-mode-toggle');
      var modeToggleText = document.querySelector('.js-mode-toggle-text');
      var modeToggleTitle = document.querySelector('.js-mode-toggle-title');

      var getCSSCustomProp = function getCSSCustomProp(propKey) {
        var response = getComputedStyle(document.documentElement).getPropertyValue(propKey);

        if (response.length) {
          response = response.replace(/\"/g, '').trim();
        }

        return response;
      };

      var applySetting = function applySetting(passedSetting) {
        var currentSetting = passedSetting || localStorage.getItem(STORAGE_KEY);

        if (currentSetting) {
          document.documentElement.setAttribute('data-user-color-scheme', currentSetting);
          setButtonLabelAndStatus(currentSetting);
        } else {
          setButtonLabelAndStatus(getCSSCustomProp(COLOR_MODE_KEY));
        }
      };

      var setButtonLabelAndStatus = function setButtonLabelAndStatus(currentSetting) {
        modeToggleText.innerText = "Enable ".concat(currentSetting === 'dark' ? 'light' : 'dark', " mode");
        modeToggleTitle.title = "Enable ".concat(currentSetting === 'dark' ? 'light' : 'dark', " mode");
      };

      var toggleSetting = function toggleSetting() {
        var currentSetting = localStorage.getItem(STORAGE_KEY);

        switch (currentSetting) {
          case null:
            currentSetting = getCSSCustomProp(COLOR_MODE_KEY) === 'dark' ? 'light' : 'dark';
            break;

          case 'light':
            currentSetting = 'dark';
            break;

          case 'dark':
            currentSetting = 'light';
            break;
        }

        localStorage.setItem(STORAGE_KEY, currentSetting);
        return currentSetting;
      };

      modeToggleButton.addEventListener('click', function (evt) {
        evt.preventDefault();
        applySetting(toggleSetting());
      });
      applySetting();
    });



  </script>

   
  {{> compiled/inline-css }}

  {{ ghost_head }}
</head>
<body class=' body_class '>
  <div class='c-site-container'>

    {{> header }}

    {{{ body }}}

    {{> footer}}
  </div>

  
  <script src="{{asset "js/app.min.js"}}"></script>

  {{ ghost_foot }}
</body>
</html>